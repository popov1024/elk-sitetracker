input {
    exec {
        command => "curl -sL -w 'beloil;%{http_code};%{size_download};%{size_upload};%{time_namelookup};%{time_connect};%{time_appconnect};%{time_redirect};%{time_pretransfer};%{time_starttransfer};%{time_total}' -o /dev/null http://www.belorusneft.by/"
        interval => 50
    }
    exec {
        command => "curl -sL -w 'beloil-siberia;%{http_code};%{size_download};%{size_upload};%{time_namelookup};%{time_connect};%{time_appconnect};%{time_redirect};%{time_pretransfer};%{time_starttransfer};%{time_total}' -o /dev/null http://www.belorusneft-siberia.ru/"
        interval => 50
    }
}

filter {
    if [message] != "" {
        grok {
            match => { "message" => "%{WORD:site};%{NUMBER:http_code};%{NUMBER:size_download};%{NUMBER:size_upload};%{NUMBER:time_namelookup};%{NUMBER:time_connect};%{NUMBER:time_appconnect};%{NUMBER:time_redirect};%{NUMBER:time_pretransfer};%{NUMBER:time_starttransfer};%{NUMBER:time_total}" }

            remove_field => ['command']
        }

        if [http_code] =~ /^5\d\d/ {
            mutate {
                add_field => [ "status", "down" ]
            }
        } else if [http_code] =~ /^4\d\d/ {
            mutate {
                add_field => [ "status", "down" ]
            }
        } else {
            mutate {
                add_field => [ "status", "up" ]
            }
        }

        mutate {
            convert => { "time_pretransfer" => "float" }
            convert => { "time_appconnect" => "float" }
            convert => { "time_namelookup" => "float" }
            convert => { "size_download" => "float" }
            convert => { "time_starttransfer" => "float" }
            convert => { "time_connect" => "float" }
            convert => { "time_total" => "float" }
            convert => { "time_redirect" => "float" }
            convert => { "http_code" => "integer" }
            remove_field => [ "message", "host" ]
        }

        
    
    }
}

output {
    #debug
    elasticsearch {
        hosts => ['elasticsearch']
    }
    stdout { codec => rubydebug }
}